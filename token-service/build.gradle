plugins {
	id 'java'
	id 'jacoco'
	alias libs.plugins.spring.boot
	alias libs.plugins.spring.dependency.management
}

group = 'ozdemir0ozdemir.nirobank'
version = '0.0.1-SNAPSHOT'

java.toolchain.languageVersion = JavaLanguageVersion.of(23);

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.postgresql:postgresql'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'

	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation project(":common-module")

	implementation libs.jjwt.getApi();
	runtimeOnly libs.jjwt.getImpl();
	runtimeOnly libs.jjwt.getJackson();

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


	testImplementation 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	testImplementation libs.jjwt.getImpl();
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:postgresql'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
	testLogging {
		events "PASSED", "SKIPPED", "FAILED"

		showExceptions true
		exceptionFormat "full"
		showCauses true
		showStackTraces true

		// Change to `true` for more verbose test output
		showStandardStreams = false

		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				def duration = String.format("%.3f sec", (result.endTime - result.startTime) / 1000)
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped) ${duration}"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}

jacocoTestReport {
	dependsOn test
}

jacoco {
	toolVersion = "0.8.12"
	reportsDirectory = layout.buildDirectory.dir("jacocoReports")
}

